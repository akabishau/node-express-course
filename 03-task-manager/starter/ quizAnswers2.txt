1. In this lesson, you created a middleware function called asyncWrapper. Why?
- The main reason is to refactor out the try-catch block that was repeated in each task-related CRUD function.

2. Suppose that you want to make sure that both a status code and and error message are send back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. 
Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {
    const { id: taskID } = req.params;
    const task = await Task.findOne({ _id: taskID });
    if (!task) {
        return next(new CustomAPIError(`Task doesn't exist`, 404))
    }
    res.status(200).json({ task });
});


